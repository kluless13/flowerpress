"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/emailjs-config.ts":
/*!*******************************!*\
  !*** ./lib/emailjs-config.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMAILJS_CONFIG: () => (/* binding */ EMAILJS_CONFIG),\n/* harmony export */   sendFeedbackEmail: () => (/* binding */ sendFeedbackEmail)\n/* harmony export */ });\n// EmailJS Configuration for FlowerPress Feedback System\n// \n// To fully enable this, you'll need to:\n// 1. Sign up at https://www.emailjs.com/\n// 2. Create a service (Gmail, Outlook, etc.)\n// 3. Create an email template\n// 4. Get your public key\n// 5. Replace the placeholder values below\nconst EMAILJS_CONFIG = {\n    SERVICE_ID: 'service_333333',\n    TEMPLATE_ID: 'template_xc2ueee',\n    PUBLIC_KEY: 'qvQ1S5O2dsv6vzPE0'\n};\n// Simple fallback email function using mailto (works immediately)\nconst sendFeedbackEmail = (params)=>{\n    const { from_name, from_email, subject, message, timestamp } = params;\n    const emailBody = \"\\nHello Liya,\\n\\nYou have received new feedback from FlowerPress!\\n\\nFrom: \".concat(from_name, \" (\").concat(from_email, \")\\nSubject: \").concat(subject, \"\\nTime: \").concat(timestamp, \"\\n\\nMessage:\\n\").concat(message, \"\\n\\n---\\nSent from FlowerPress App\\n  \").trim();\n    const mailtoLink = \"mailto:angd1399@gmail.com?subject=FlowerPress Feedback: \".concat(encodeURIComponent(subject), \"&body=\").concat(encodeURIComponent(emailBody));\n    // Open user's default email client\n    window.open(mailtoLink, '_blank');\n    return Promise.resolve();\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9lbWFpbGpzLWNvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdEQUF3RDtBQUN4RCxHQUFHO0FBQ0gsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0MsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6QiwwQ0FBMEM7QUFFbkMsTUFBTUEsaUJBQWlCO0lBQzVCQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsWUFBWTtBQUNkLEVBQUM7QUFFRCxrRUFBa0U7QUFDM0QsTUFBTUMsb0JBQW9CLENBQUNDO0lBT2hDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxTQUFTLEVBQUUsR0FBR0w7SUFFL0QsTUFBTU0sWUFBWSw4RUFLRUosT0FBZEQsV0FBVSxNQUNQRSxPQURXRCxZQUFXLGdCQUV6QkcsT0FER0YsU0FBUSxZQUlqQkMsT0FITUMsV0FBVSxrQkFHUixPQUFSRCxTQUFRLDBDQUlORyxJQUFJO0lBRU4sTUFBTUMsYUFBYSwyREFBK0ZDLE9BQXBDQSxtQkFBbUJOLFVBQVMsVUFBc0MsT0FBOUJNLG1CQUFtQkg7SUFFckksbUNBQW1DO0lBQ25DSSxPQUFPQyxJQUFJLENBQUNILFlBQVk7SUFFeEIsT0FBT0ksUUFBUUMsT0FBTztBQUN4QixFQUFDIiwic291cmNlcyI6WyIvVXNlcnMva2x1bGVzcy9mbG93ZXJwcmVzcy9saWIvZW1haWxqcy1jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRW1haWxKUyBDb25maWd1cmF0aW9uIGZvciBGbG93ZXJQcmVzcyBGZWVkYmFjayBTeXN0ZW1cbi8vIFxuLy8gVG8gZnVsbHkgZW5hYmxlIHRoaXMsIHlvdSdsbCBuZWVkIHRvOlxuLy8gMS4gU2lnbiB1cCBhdCBodHRwczovL3d3dy5lbWFpbGpzLmNvbS9cbi8vIDIuIENyZWF0ZSBhIHNlcnZpY2UgKEdtYWlsLCBPdXRsb29rLCBldGMuKVxuLy8gMy4gQ3JlYXRlIGFuIGVtYWlsIHRlbXBsYXRlXG4vLyA0LiBHZXQgeW91ciBwdWJsaWMga2V5XG4vLyA1LiBSZXBsYWNlIHRoZSBwbGFjZWhvbGRlciB2YWx1ZXMgYmVsb3dcblxuZXhwb3J0IGNvbnN0IEVNQUlMSlNfQ09ORklHID0ge1xuICBTRVJWSUNFX0lEOiAnc2VydmljZV8zMzMzMzMnLFxuICBURU1QTEFURV9JRDogJ3RlbXBsYXRlX3hjMnVlZWUnLCBcbiAgUFVCTElDX0tFWTogJ3F2UTFTNU8yZHN2NnZ6UEUwJ1xufVxuXG4vLyBTaW1wbGUgZmFsbGJhY2sgZW1haWwgZnVuY3Rpb24gdXNpbmcgbWFpbHRvICh3b3JrcyBpbW1lZGlhdGVseSlcbmV4cG9ydCBjb25zdCBzZW5kRmVlZGJhY2tFbWFpbCA9IChwYXJhbXM6IHtcbiAgZnJvbV9uYW1lOiBzdHJpbmdcbiAgZnJvbV9lbWFpbDogc3RyaW5nXG4gIHN1YmplY3Q6IHN0cmluZ1xuICBtZXNzYWdlOiBzdHJpbmdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbn0pID0+IHtcbiAgY29uc3QgeyBmcm9tX25hbWUsIGZyb21fZW1haWwsIHN1YmplY3QsIG1lc3NhZ2UsIHRpbWVzdGFtcCB9ID0gcGFyYW1zXG4gIFxuICBjb25zdCBlbWFpbEJvZHkgPSBgXG5IZWxsbyBMaXlhLFxuXG5Zb3UgaGF2ZSByZWNlaXZlZCBuZXcgZmVlZGJhY2sgZnJvbSBGbG93ZXJQcmVzcyFcblxuRnJvbTogJHtmcm9tX25hbWV9ICgke2Zyb21fZW1haWx9KVxuU3ViamVjdDogJHtzdWJqZWN0fVxuVGltZTogJHt0aW1lc3RhbXB9XG5cbk1lc3NhZ2U6XG4ke21lc3NhZ2V9XG5cbi0tLVxuU2VudCBmcm9tIEZsb3dlclByZXNzIEFwcFxuICBgLnRyaW0oKVxuXG4gIGNvbnN0IG1haWx0b0xpbmsgPSBgbWFpbHRvOmFuZ2QxMzk5QGdtYWlsLmNvbT9zdWJqZWN0PUZsb3dlclByZXNzIEZlZWRiYWNrOiAke2VuY29kZVVSSUNvbXBvbmVudChzdWJqZWN0KX0mYm9keT0ke2VuY29kZVVSSUNvbXBvbmVudChlbWFpbEJvZHkpfWBcbiAgXG4gIC8vIE9wZW4gdXNlcidzIGRlZmF1bHQgZW1haWwgY2xpZW50XG4gIHdpbmRvdy5vcGVuKG1haWx0b0xpbmssICdfYmxhbmsnKVxuICBcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG59ICJdLCJuYW1lcyI6WyJFTUFJTEpTX0NPTkZJRyIsIlNFUlZJQ0VfSUQiLCJURU1QTEFURV9JRCIsIlBVQkxJQ19LRVkiLCJzZW5kRmVlZGJhY2tFbWFpbCIsInBhcmFtcyIsImZyb21fbmFtZSIsImZyb21fZW1haWwiLCJzdWJqZWN0IiwibWVzc2FnZSIsInRpbWVzdGFtcCIsImVtYWlsQm9keSIsInRyaW0iLCJtYWlsdG9MaW5rIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwid2luZG93Iiwib3BlbiIsIlByb21pc2UiLCJyZXNvbHZlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/emailjs-config.ts\n"));

/***/ })

});